
// returns the number of day cards currently in the trip
function numDays () {
	return parseInt($('#days .day-card').last().data('itemnum'));
}

//adds a day card to the end of the list of day cards with placeholder text 
function addDayCard(dayID) {
	var newDayCount = numDays()+1;
	
	w=document.createElement('div');
	
	$(w).addClass('day-card-wrapper')
		.html("<div class='day-date-wrapper'>"
				+ "<span class='day-date' data-date='' >"
				+ getNewDateString()
				+ " </span></div>")		
		.appendTo($("#days"));
		
	d=document.createElement('div');
	$(d).addClass('card day-card')
	    .html("<div class='city-wrapper'><h4 class='city'></h4></div>"
				+ "<div class='notes-wrapper'><small><p class='notes' data-rows='4'></p></small></div>"
				+ "<div class='hotel-wrapper'><p class='hotel'></p></div>")
		.attr("data-itemnum", dayID)
		.attr("data-dayID", dayID)
	    .appendTo($(w));	
	
	enableInlineEditingForOneDay(d);
	return d;
}

//turns on inline editing for all details of a day card, for all day cards in a trip
function enableInlineEditingForAllDays() {
	
	$.each($('.day-card'), function(i, element)
	{
		enableInlineEditingForOneDay($(element));
	});
	
}

//turns on inline editing for all details of a day card
//param dayCard is the document element of the dayCard div
function enableInlineEditingForOneDay(dayCard) {
	dayID = $(dayCard).attr('data-dayID');
	$(dayCard).find('.city').editable({
		type: 'text',
		name: 'city',
		pk: dayID,
		url: '/days/' + dayID,
		ajaxOptions: {
			type: 'put',
			dataType: 'json',
		},
		emptytext: 'City', 
		emptyclass: 'text-muted', 
		highlight: '#2B715C'
	});
	$(dayCard).find('.notes').editable({
		type: 'textarea',
		name: 'notes',
		pk: dayID,
		url: '/days/' + dayID,
		ajaxOptions: {
			type: 'put',
			dataType: 'json',
		},
		emptytext: '<span class="fa fa-plus-square"></span> Add things to see & do', 
		emptyclass: 'text-muted', 
		highlight: '#2B715C'
	});
	$(dayCard).find('.hotel').editable({
		type: 'text',
		name: 'hotel',
		pk: dayID,
		url: '/days/' + dayID,
		ajaxOptions: {
			type: 'put',
			dataType: 'json',
		},
		emptytext: 'Hotel', 
		emptyclass: 'text-muted', 
		highlight: '#2B715C'
	});
}

//deprecated
//turns on inline editing for all details of a day card, for the given day record
//param is day's db record id
function enableInlineEditingForOneDay_old(dayNum) {
	
	$('[data-elementID=city' + '-' + dayNum + ']').editable({
		type: 'text',
		name: 'city',
		pk: dayNum,
		url: '/days/1',
		ajaxOptions: {
			type: 'put',
			dataType: 'json',
		},
		emptytext: 'City', 
		emptyclass: 'text-muted', 
		highlight: '#2B715C'
	});
	$('[data-elementID=notes' + '-' + dayNum + ']').editable({
		type: 'textarea',
		name: 'notes',
		pk: dayNum,
		url: '/days/1',
		ajaxOptions: {
			type: 'put',
			dataType: 'json',
		},
		emptytext: '<span class="fa fa-plus-square"></span> Add things to see & do', 
		emptyclass: 'text-muted', 
		highlight: '#2B715C'
	});
	$('[data-elementID=hotel' + '-' + dayNum + ']').editable({
		type: 'text',
		name: 'hotel',
		pk: dayNum,
		url: '/days/1',
		ajaxOptions: {
			type: 'put',
			dataType: 'json',
		},
		emptytext: 'Hotel', 
		emptyclass: 'text-muted', 
		highlight: '#2B715C'
	});
}

//deprecated
//turns on inline editing for all elements of a given kind, e.g. all Cities in a trip
//editableOptions is a hash that gets passed to the editable() function for bootstrap-editable
function enableInlineEditing(elementName, numElements, editableOptions) {
	for (var i=1; i <= numElements; i++) {
		$('[data-elementID=' + elementName + '-' + i + ']').editable(editableOptions);
	}
}

//updates all subsequent day's dates
//uses moment.js for formatting and incrementing dates
//param newStartDate is of type javascript Date object
function updateDates(newStartDate) {
	if (newStartDate) {
		var d = moment(newStartDate);
		$('.day-date-wrapper').each(function(i, date) {
			$(date).children('span.day-date').html(d.format('ddd, D MMM YYYY') + ' ');
			d.add('days', 1);
		});	
	}
	else {
		$('.day-date:first').html('Today');
	}
}

// returns the trip's currently displayed startDate as a javascript Date object; null if no startDate set
function getCurrentStartDate() {
	var d = new Date($('.day-date:first').html());
	if (d.getDate()) { return d; }
	return null;
}

//returns a date string for the next date in the trip, or empty string if start date hasn't yet been set
function getNewDateString() {
	var start = getCurrentStartDate();
	var newDate;
	var newDateString;
	
	if (start) {
		newDate = new Date (start);
		newDate.setDate(start.getDate() + numDays());
		return newDate.toDateString();
	} 
	return ""	
}
